generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id Int @id @default(autoincrement()) 
  email String @unique
  password String?
  userName String? @map("user_name")
  birthDate String? @map("birth_date")
  phoneNumber String? @map("phone_number")
  kakao String?
  google String?

  users Users[]
}

model Users{
  id Int @id @default(autoincrement())
  authId Int? @map("auth_id")
  nickName String? @map("nick_name")
  introduction String?
  image String? @map("profile_image_url")
  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  auth Auth? @relation(fields: [authId], references: [id])

  follows Follows[] @relation("Follow")
  followers Follows[] @relation("Follower")
  fandoms Fandoms[]
  fandomAnnouncements FandomAnnouncements[]
  subscribes Subscribes[]
  feeds Feeds[]
  likes Likes[]
  comments Comments[]
  sonminsuRequests SonminsuRequests[]
  sonminsuAnswers SonminsuAnswers[]
  buckets Buckets[]
  messages Messages[]
  readedMessages ReadedMessages[]
  bookmarks SonminsuRequestBookmarks[]
}

model Follows {
  userId Int @map("user_id")
  followId Int @map("follow_id")
  follower Users @relation("Follow", fields: [userId], references: [id], onDelete: Cascade)
  follow Users @relation("Follower", fields: [followId], references: [id], onDelete: Cascade)

  @@id([userId,followId])
}

model Fandoms {
  id Int @id @default(autoincrement()) 
  userId Int? @map("user_id")
  fandomName String @map("fandom_name")
  image String @map("thumbnail_image_url")
  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  admin Users? @relation(fields: [userId], references: [id])

  rank FandomRanks?
  announcements FandomAnnouncements[]
  subscribes Subscribes[]
  feeds Feeds[]
  messages Messages[]
}

model FandomRanks {
  fandomId Int @id @map("fandom_id")
  point Int @default(0)

  fandom Fandoms @relation(fields: [fandomId], references: [id], onDelete: Cascade)
}

model FandomAnnouncements {
  id Int @id @default(autoincrement())
  fandomId Int? @map("fandom_id")
  userId Int? @map("user_id")
  content String
  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  fandom Fandoms? @relation(fields: [fandomId], references: [id])
  author Users? @relation(fields: [userId], references: [id])
}

model Subscribes {
  userId Int @map("user_id")
  fandomId Int @map("fandom_id")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  fandom Fandoms @relation(fields: [fandomId], references: [id], onDelete: Cascade)

  @@id([userId,fandomId])
}

model Feeds {
  id Int @id @default(autoincrement())
  userId Int? @map("user_id")
  fandomId Int? @map("fandom_id")
  content String
  groupName String @map("group_name")
  artistName String @map("artist_name")  
  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  author Users? @relation(fields: [userId], references: [id])
  fandom Fandoms? @relation(fields: [fandomId], references: [id])

  tags FeedHashTags[]
  images FeedImages[]
  likes Likes[]
  comments Comments[]
  sonminsuItems SonminsuItems[]
}

model HashTags {
  id Int @id @default(autoincrement())
  tag String @unique

  feeds FeedHashTags[]
}

model FeedHashTags {
  feedId Int @map("feed_id")
  hashTagId Int @map("hashTag_id")

  feed Feeds @relation(fields: [feedId], references: [id], onDelete: Cascade)
  hashTag HashTags @relation(fields: [hashTagId], references: [id], onDelete: Cascade)

  @@id([feedId,hashTagId])
}

model FeedImages {
  id Int @id @default(autoincrement())
  feedId Int? @map("feed_id")
  url String

  feed Feeds? @relation(fields: [feedId], references: [id])
}

model Likes {
  userId Int @map("user_id")
  feedId Int @map("feed_id")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  feed Feeds @relation(fields: [feedId], references: [id], onDelete: Cascade)

  @@id([userId, feedId])
}

model Comments {
  id Int @id @default(autoincrement())
  feedId Int? @map("feed_id")
  parentId Int? @map("parent_id")
  userId Int? @map("user_id")
  content String
  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  feed Feeds? @relation(fields: [feedId], references: [id])
  parent Comments? @relation("replies", fields: [parentId], references: [id])
  author Users? @relation(fields: [userId], references: [id])

  replies Comments[] @relation("replies")
}

model SonminsuRequests {
  id Int @id @default(autoincrement())
  userId Int? @map("user_id")
  title String
  content String
  groupName String @map("group_name")
  artistName String @map("artist_name")
  isDone Boolean? @map("is_done")
  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  user Users? @relation(fields: [userId], references: [id])

  answers SonminsuAnswers[]
  images SonminsuRequestImages[]
  bookmarks SonminsuRequestBookmarks[]
}

model SonminsuRequestBookmarks {
  userId Int @map("user_id")
  requestId Int @map("request_id")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  request SonminsuRequests @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@id([userId,requestId])
}

model SonminsuRequestImages {
  id Int @id @default(autoincrement())
  requestId Int? @map("request_id")
  url String

  request SonminsuRequests? @relation(fields: [requestId], references: [id])
}

model SonminsuAnswers {
  id Int @id @default(autoincrement())
  userId Int? @map("user_id")
  requestId Int? @map("request_id")
  isChoosed Boolean? @map("is_choosed")
  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  user Users? @relation(fields: [userId], references: [id])
  request SonminsuRequests? @relation(fields: [requestId], references: [id])

  items SonminsuItems[]
}

model SonminsuItems {
  id Int @id @default(autoincrement())
  feedId Int? @map("feed_id")
  answerId Int? @map("answer_id")
  originUrl String @map("origin_url")
  imgUrl String @map("image_url")
  title String
  price String
  groupName String @map("group_name")
  artistName String @map("artist_name")
  registration Boolean?
  createdAt DateTime @default(now()) @map("created_at")

  feed Feeds? @relation(fields: [feedId], references: [id])
  answer SonminsuAnswers? @relation(fields: [answerId], references: [id])

  bucketItems BucketItems[]
}

model Buckets {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  bucketName String @map("bucket_name")
  createdAt DateTime @default(now()) @map("created_at")

  owner Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  items BucketItems[]
}

model BucketItems {
  bucketId Int @map("bucket_id")
  itemId Int @map("item_id")

  bucket Buckets @relation(fields: [bucketId], references: [id], onDelete: Cascade)
  item SonminsuItems @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([bucketId,itemId])
}

model Messages {
  id Int @id @default(autoincrement())
  fandomId Int? @map("fandom_id")
  userId Int? @map("user_id")
  content String
  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  fandom Fandoms? @relation(fields: [fandomId], references: [id])
  author Users? @relation(fields: [userId], references: [id])

  files MessageFiles[]
}

model MessageFiles {
  id Int @id @default(autoincrement())
  messageId Int? @map("message_id")
  url String
  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  message Messages? @relation(fields: [messageId], references: [id])
}

model ReadedMessages {
  userId Int @map("user_id")
  fandomId Int @map("fandom_id")
  messageId Int @default(0) @map("message_id")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId,fandomId])
}